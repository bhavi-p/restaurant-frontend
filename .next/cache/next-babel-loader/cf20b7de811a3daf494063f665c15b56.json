{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name \n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (error) return __jsx(\"p\", null, \"ERROR\");\n  if (!data) return __jsx(\"p\", null, \"Not found\"); // console.log(`Query Data: ${data.restaurants}`)\n\n  let searchQuery = [];\n  let isDish = false;\n  let dishName = [];\n\n  const renderDishes = restaurantID => {\n    // console.log(`RESTID: ${restaurantID}`)\n    return __jsx(Dishes, {\n      restId: restaurantID\n    }, \" \");\n  };\n\n  if (!isDish) {\n    searchQuery = data.restaurants.filter(res => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n  }\n\n  data.restaurants.forEach(restaurant => restaurant.dishes.forEach(dish => {\n    if (dish.name.toLowerCase().includes(props.search)) {\n      isDish = true; // searchQuery.push(restaurant);\n\n      if (searchQuery.indexOf(restaurant) == -1) {\n        dishName.push(dishName);\n        searchQuery.push(restaurant);\n        return __jsx(Row, {\n          xs: \"3\"\n        }, renderDishes(restaurant.id));\n      }\n    }\n  })); // let searchQuery = data.restaurants.filter((res) => {\n  //   return res.name.toLowerCase().includes(props.search)\n  // }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null; // let restDish = searchQuery[0] ? searchQuery[0]. : null;\n  // definet renderer for Dishes\n\n  const renderDish = restaurantID => {\n    // console.log(`RESTID: ${restaurantID}`)\n    console.log('renderDish');\n    return __jsx(Dishes, {\n      restId: restaurantID\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337${res.image[0].url}`\n    }), __jsx(CardBody, null, __jsx(CardText, null, res.description)), __jsx(\"div\", {\n      className: \"card-footer\"\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id)\n    }, res.name))))); // const dishList = searchQuery[0].map((dish) => ( \n    // ))\n\n    return __jsx(Container, null, __jsx(Row, {\n      xs: \"3\"\n    }, restList), __jsx(Row, {\n      xs: \"3\"\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", null, \" No Restaurants or Dishes Found\");\n  }\n}\n\nexport default RestaurantList; // src={\n//   `http://localhost:1337` + res.image.url\n// }","map":null,"metadata":{},"sourceType":"module"}