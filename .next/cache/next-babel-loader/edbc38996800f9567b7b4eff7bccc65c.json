{"ast":null,"code":"var _jsxFileName = \"C:\\\\MIT Files\\\\Week 28\\\\deliveroo-clone-tutorial\\\\components\\\\restaurantList.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name \n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, \"Not found\"); // console.log(`Query Data: ${data.restaurants}`)\n\n  let searchQuery = [];\n  let isDish = false;\n  data.restaurants.forEach(restaurant => restaurant.dishes.forEach(dish => {\n    if (dish.name.toLowerCase().includes(props.search)) {\n      if (searchQuery.indexOf(restaurant) == -1) {\n        isDish = true;\n        searchQuery.push(restaurant);\n      }\n    }\n  }));\n\n  if (!isDish) {\n    searchQuery = data.restaurants.filter(res => {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n  } // let searchQuery = data.restaurants.filter((res) => {\n  //   return res.name.toLowerCase().includes(props.search)\n  // }) || [];\n\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null; // definet renderer for Dishes\n\n  const renderDishes = restaurantID => {\n    // console.log(`RESTID: ${restaurantID}`)\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  const renderDish = restaurantID => {\n    // console.log(`RESTID: ${restaurantID}`)\n    console.log('renderDish');\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: `http://localhost:1337${res.image[0].url}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), __jsx(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, __jsx(CardText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, res.description)), __jsx(\"div\", {\n      className: \"card-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, res.name)))));\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }, isDish ? renderDishes(restaurantID) : renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 12\n      }\n    }, \" No Restaurants Found\");\n  }\n}\n\nexport default RestaurantList; // src={\n//   `http://localhost:1337` + res.image.url\n// }","map":{"version":3,"sources":["C:/MIT Files/Week 28/deliveroo-clone-tutorial/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchQuery","isDish","restaurants","forEach","restaurant","dishes","dish","name","toLowerCase","includes","search","indexOf","push","filter","res","restId","id","renderDishes","renderDish","console","log","length","restList","map","margin","height","image","url","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\n\n\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0)\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name \n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  \n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  // console.log(`Query Data: ${data.restaurants}`)\n\n  let searchQuery = [];\n  let isDish = false;\n  data.restaurants.forEach((restaurant) => \n    restaurant.dishes.forEach(dish => {\n      if(dish.name.toLowerCase().includes(props.search)) {\n        \n        if(searchQuery.indexOf(restaurant)==-1) {\n          isDish = true;\n          searchQuery.push(restaurant);\n        }\n      }\n    })\n  )\n\n  if(!isDish) {\n    searchQuery = data.restaurants.filter((res) => {\n        return res.name.toLowerCase().includes(props.search)\n      }) || [];\n  }\n\n\n  // let searchQuery = data.restaurants.filter((res) => {\n  //   return res.name.toLowerCase().includes(props.search)\n  // }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n\n  // definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    // console.log(`RESTID: ${restaurantID}`)\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  };\n\n  const renderDish = (restaurantID) => {\n    // console.log(`RESTID: ${restaurantID}`)\n    console.log('renderDish');\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  }\n  \n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={\n              `http://localhost:1337${res.image[0].url}`\n            }\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\n\n          </div>\n        </Card>\n      </Col>\n    ))\n\n    return (\n\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n\n        <Row xs='3'>\n          {isDish? renderDishes(restaurantID) : renderDishes(restaurantID)}\n        </Row>\n\n      </Container>\n\n    )\n  } else {\n    return <h1> No Restaurants Found</h1>\n  }\n}\nexport default RestaurantList\n\n// src={\n//   `http://localhost:1337` + res.image.url\n// }"]},"metadata":{},"sourceType":"module"}