{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\MIT Files\\\\Week 28\\\\deliveroo-clone-tutorial\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name \\n        dishes {\\n          id\\n          name\\n          description\\n          price\\n          image {\\n            url\\n          }\\n        }\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, \"Not found\"); // console.log(`Query Data: ${data.restaurants}`)\n\n  var searchQuery = [];\n  var isDish = false;\n  var dishIndex;\n  data.restaurants.forEach(function (restaurant) {\n    return restaurant.dishes.forEach(function (dish) {\n      if (dish.name.toLowerCase().includes(props.search)) {\n        // searchQuery.push(restaurant);\n        if (searchQuery.indexOf(restaurant) == -1) {\n          isDish = true; // setRestaurantID(restaurant.id);\n\n          dishIndex = restaurants.dishes.indexOf(dish.name);\n          console.log(\"Dish Index: \".concat(dishIndex));\n          searchQuery.push(restaurant); // renderDishes(restaurant.id);\n        }\n      }\n    });\n  });\n\n  if (!isDish) {\n    searchQuery = data.restaurants.filter(function (res) {\n      return res.name.toLowerCase().includes(props.search);\n    }) || [];\n  } // let searchQuery = data.restaurants.filter((res) => {\n  //   return res.name.toLowerCase().includes(props.search)\n  // }) || [];\n\n\n  var restId = searchQuery[0] ? searchQuery[0].id : null; // let restDish = searchQuery[0] ? searchQuery[0]. : null;\n  // definet renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    // console.log(`RESTID: ${restaurantID}`)\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  var renderDish = function renderDish(restaurantID) {\n    // console.log(`RESTID: ${restaurantID}`)\n    console.log('renderDish');\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \" \");\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: \"http://localhost:1337\".concat(res.image[0].url),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, __jsx(CardText, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }, res.description)), __jsx(\"div\", {\n        className: \"card-footer\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, res.name))));\n    }); // const dishList = searchQuery[0].map((dish) => ( \n    // ))\n\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      xs: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 12\n      }\n    }, \" No Restaurants or Dishes Found\");\n  }\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList; // src={\n//   `http://localhost:1337` + res.image.url\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/MIT Files/Week 28/deliveroo-clone-tutorial/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchQuery","isDish","dishIndex","restaurants","forEach","restaurant","dishes","dish","name","toLowerCase","includes","search","indexOf","console","log","push","filter","res","restId","id","renderDishes","renderDish","length","restList","map","margin","height","image","url","description"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,OAArC;AAGA,OAAOC,UAAP,MAAuB,WAAvB;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,GARF,EASEC,GATF,QAUO,YAVP;;AAYA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAAA;;AAAA,kBACWZ,QAAQ,CAAC,CAAD,CADnB;AAAA,MACtBa,YADsB;AAAA,MACRC,eADQ;;AAAA,oBAEZf,UAAU,CAACE,UAAD,CAFE;AAAA,MAErBc,IAFqB,eAErBA,IAFqB;;AAAA,mBAGHf,QAAQ,CAACe,IAAD,CAHL;AAAA,MAGtBC,KAHsB;AAAA,MAGfC,QAHe;;AAI7B,MAAMC,eAAe,GAAGtB,GAAH,mBAArB;;AAJ6B,kBA0BIC,QAAQ,CAACqB,eAAD,CA1BZ;AAAA,MA0BrBC,OA1BqB,aA0BrBA,OA1BqB;AAAA,MA0BZC,KA1BY,aA0BZA,KA1BY;AAAA,MA0BLC,IA1BK,aA0BLA,IA1BK;;AA2B7B,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACC,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAP,CA7BkB,CA8B7B;;AAEA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,SAAJ;AACAH,EAAAA,IAAI,CAACI,WAAL,CAAiBC,OAAjB,CAAyB,UAACC,UAAD;AAAA,WACvBA,UAAU,CAACC,MAAX,CAAkBF,OAAlB,CAA0B,UAAAG,IAAI,EAAI;AAChC,UAAGA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCpB,KAAK,CAACqB,MAAvC,CAAH,EAAmD;AACjD;AACA,YAAGX,WAAW,CAACY,OAAZ,CAAoBP,UAApB,KAAiC,CAAC,CAArC,EAAwC;AACtCJ,UAAAA,MAAM,GAAG,IAAT,CADsC,CAEtC;;AACAC,UAAAA,SAAS,GAAGC,WAAW,CAACG,MAAZ,CAAmBM,OAAnB,CAA2BL,IAAI,CAACC,IAAhC,CAAZ;AACAK,UAAAA,OAAO,CAACC,GAAR,uBAA2BZ,SAA3B;AACAF,UAAAA,WAAW,CAACe,IAAZ,CAAiBV,UAAjB,EALsC,CAMtC;AACD;AACF;AACF,KAZD,CADuB;AAAA,GAAzB;;AAgBA,MAAG,CAACJ,MAAJ,EAAY;AACVD,IAAAA,WAAW,GAAGD,IAAI,CAACI,WAAL,CAAiBa,MAAjB,CAAwB,UAACC,GAAD,EAAS;AAC3C,aAAOA,GAAG,CAACT,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,CAAgCpB,KAAK,CAACqB,MAAtC,CAAP;AACD,KAFW,KAEN,EAFR;AAGD,GAvD4B,CA0D7B;AACA;AACA;;;AAEA,MAAIO,MAAM,GAAGlB,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAAC,CAAD,CAAX,CAAemB,EAAhC,GAAqC,IAAlD,CA9D6B,CA+D7B;AAEA;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC7B,YAAD,EAAkB;AACrC;AACA,WAAQ,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR;AACD,GAHD;;AAKA,MAAM8B,UAAU,GAAG,SAAbA,UAAa,CAAC9B,YAAD,EAAkB;AACnC;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,WAAQ,MAAC,MAAD;AAAQ,MAAA,MAAM,EAAEvB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAR;AACD,GAJD;;AAMA,MAAIS,WAAW,CAACsB,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,QAAMC,QAAQ,GAAGvB,WAAW,CAACwB,GAAZ,CAAgB,UAACP,GAAD;AAAA,aAC/B,MAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAmB,QAAA,GAAG,EAAEA,GAAG,CAACE,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,OAAD;AACE,QAAA,GAAG,EAAE,IADP;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAFT;AAGE,QAAA,GAAG,iCACuBT,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAaC,GADpC,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAQE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAWX,GAAG,CAACY,WAAf,CADF,CARF,EAWE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,MAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,OAAO,EAAE;AAAA,iBAAMrC,eAAe,CAACyB,GAAG,CAACE,EAAL,CAArB;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8DF,GAAG,CAACT,IAAlE,CAFF,CAXF,CADF,CAD+B;AAAA,KAAhB,CAAjB,CAD0B,CA0B1B;AAEA;;AAEA,WAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGe,QADH,CADF,EAKE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGH,YAAY,CAAC7B,YAAD,CAHf,CALF,CAFF;AAiBD,GA/CD,MA+CO;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAP;AACD;AACF;;GA/HQF,c;UA0B0Bd,Q;;;KA1B1Bc,c;AAgIT,eAAeA,cAAf,C,CAEA;AACA;AACA","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\"\nimport { useContext, useState } from 'react';\n\n\nimport AppContext from \"./context\"\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0)\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart)\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name \n        dishes {\n          id\n          name\n          description\n          price\n          image {\n            url\n          }\n        }\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  \n  const { loading, error, data } = useQuery(GET_RESTAURANTS)\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n  // console.log(`Query Data: ${data.restaurants}`)\n\n  let searchQuery = [];\n  let isDish = false;\n  let dishIndex;\n  data.restaurants.forEach((restaurant) => \n    restaurant.dishes.forEach(dish => {\n      if(dish.name.toLowerCase().includes(props.search)) {\n        // searchQuery.push(restaurant);\n        if(searchQuery.indexOf(restaurant)==-1) {\n          isDish = true;\n          // setRestaurantID(restaurant.id);\n          dishIndex = restaurants.dishes.indexOf(dish.name);\n          console.log(`Dish Index: ${dishIndex}`);\n          searchQuery.push(restaurant);\n          // renderDishes(restaurant.id);\n        }\n      }\n    })\n  )\n\n  if(!isDish) {\n    searchQuery = data.restaurants.filter((res) => {\n        return res.name.toLowerCase().includes(props.search)\n      }) || [];\n  }\n\n\n  // let searchQuery = data.restaurants.filter((res) => {\n  //   return res.name.toLowerCase().includes(props.search)\n  // }) || [];\n\n  let restId = searchQuery[0] ? searchQuery[0].id : null;\n  // let restDish = searchQuery[0] ? searchQuery[0]. : null;\n\n  // definet renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    // console.log(`RESTID: ${restaurantID}`)\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  };\n\n  const renderDish = (restaurantID) => {\n    // console.log(`RESTID: ${restaurantID}`)\n    console.log('renderDish');\n    return (<Dishes restId={restaurantID}> </Dishes>)\n  }\n  \n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"6\" sm=\"4\" key={res.id}>\n        <Card style={{ margin: \"0 0.5rem 20px 0.5rem\" }}>\n          <CardImg\n            top={true}\n            style={{ height: 200 }}\n            src={\n              `http://localhost:1337${res.image[0].url}`\n            }\n          />\n          <CardBody>\n            <CardText>{res.description}</CardText>\n          </CardBody>\n          <div className=\"card-footer\">\n\n            <Button color=\"info\" onClick={() => setRestaurantID(res.id)}>{res.name}</Button>\n\n\n          </div>\n        </Card>\n      </Col>\n      \n      \n    ))\n\n    // const dishList = searchQuery[0].map((dish) => ( \n\n    // ))\n\n    return (\n\n      <Container>\n        <Row xs='3'>\n          {restList}\n        </Row>\n\n        <Row xs='3'>\n          {/* {isDish ? renderDishes(searchQuery[0].id) : renderDishes(restaurantID)} */}\n          {/* {restaurantID ? renderDishes(restaurantID) : \"Select a Rest\"} */}\n          {renderDishes(restaurantID)} \n        </Row>\n\n      </Container>\n\n      )\n\n  } else {\n    return <h1> No Restaurants or Dishes Found</h1>\n  }\n}\nexport default RestaurantList\n\n// src={\n//   `http://localhost:1337` + res.image.url\n// }"]},"metadata":{},"sourceType":"module"}